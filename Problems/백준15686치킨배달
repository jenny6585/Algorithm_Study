import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Main {
	
	static List<Integer> chickX;//치킨집 위치
	static List<Integer>chickY;
	static List<Integer> houseX;//집의 위치
	static List<Integer> houseY;
	static int [][]map;
	static int [] select;
	static int N;
	static int M;
	static int count;
	static int min=Integer.MAX_VALUE;
	
	public static void comb(int index) {//치킨집 조합
		if(count==M) {
			int temp=0;
			for (int i = 0; i < houseX.size(); i++) {//각 집에 대해
				int  sum=Integer.MAX_VALUE;
				for (int j = 0; j <M; j++) {//치킨집과의 거리를 구하고
					int a= Math.abs(houseX.get(i)-chickX.get(select[j]))+Math.abs(houseY.get(i)-chickY.get(select[j]));
					sum =sum>a ? a:sum;//더 작은 값을 sum에 저장
				}
				temp+=sum;//그 값들의 합을 구하고
			}
			min = min>temp? temp:min;//최소값을 찾는다
			return;
		}
		for (int i = index; i < chickX.size(); i++) {//치킨집의 수만큼 반복
			count++;
			select[count-1] = i;
			comb(i+1);//선택
			count--;//선택하지 않으면
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		String input[] = br.readLine().split(" ");
		N = Integer.parseInt(input[0]);
		M = Integer.parseInt(input[1]);
		map = new int [N][N];
		chickX = new ArrayList<>();
		chickY = new ArrayList<>();
		houseX = new ArrayList<>();
		houseY = new ArrayList<>();
		select = new int[M];
		
		for (int i = 0; i < N; i++) {
			input = br.readLine().split(" ");
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(input[j]);//지도를 만들고
				if(map[i][j]==1) {//집이면
					houseX.add(i);//좌표 저장
					houseY.add(j);
				}else if(map[i][j]==2) {//치킨집이면
					chickX.add(i);//좌표 저장
					chickY.add(j);
				}
			}
		}//입력
		
		
		count=0;
		comb(0);//위의 거리 구하는 함수 시행
		bw.write(min+"");
		bw.flush();
		bw.close();
		

	}

}
