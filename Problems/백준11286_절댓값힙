import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.PriorityQueue;

public class Main {
	static PriorityQueue <Integer> pq;//절대값
	static HashMap<Integer,Integer> hash = new HashMap<>(); //절대값, 음수 갯수
	static List<Integer>ans = new ArrayList<>();
	
	public static void cal(){
		int cur=pq.peek();
		
		if(hash.containsKey(cur) && hash.get(cur)>0) {//해시에 값이 있고 음수 개수가 0보다 클때
			hash.replace(cur,hash.get(cur)-1);//해시 벨류 값 하나 빼기
			ans.add(-1*pq.poll());
		}else {
			ans.add(pq.poll());
		}
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		//pq: 입력의 절댓값을 추가
		//hash[절댓값:음수의 개수]
		//절댓값을 뽑을때 음수의 개수가 양수이면 -1을 곱해서 출력
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int N = Integer.parseInt(br.readLine());
		pq = new PriorityQueue<>();
		
		for (int i = 0; i < N; i++) {
			int input=Integer.parseInt(br.readLine());
			if(input==0) {
				if(pq.isEmpty()) {//큐가 비어있을때
					ans.add(0);
					continue;
				}
				cal();
			}else if(input<0){//음수일때
				if(hash.containsKey(Math.abs(input))) {//키가 이미 있으면
					hash.replace(Math.abs(input),hash.get(Math.abs(input))+1);//
				}else {//키가 없으면
					hash.put(Math.abs(input), 1);//절대값, count
				}
				pq.add(Math.abs(input));
			}else {//양수 일때
				pq.add(input);
			}
		}//end for
		for (int i = 0; i < ans.size(); i++) {
			bw.write(ans.get(i)+"\n");
		}
		bw.flush();
		bw.close();

	}

}
